name: CD - Deploy to Development

on:
  workflow_run:
    workflows: ["CI - Build and Push to ECR"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

env:
  ECR_REPOSITORY: frontend-demo
  ECR_REGISTRY: ${{ vars.AWS_DEV_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_DEV_ECR_REGION }}.amazonaws.com
  INSTANCE_ID: i-09f9fe068a9daefed
  SERVICE_NAME: frontend
  SSH_USER: ubuntu

jobs:
  deploy:
    name: Deploy to Development
    runs-on: [self-hosted, dev-nva]
    
    # Only run if CI workflow was successful and triggered by push (not PR)
    # if: |
    #   github.event.workflow_run.conclusion == 'success' &&
    #   github.event.workflow_run.event == 'push'
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEV_GITHUB_ACTION_ROLE }}
          aws-region: ${{ vars.AWS_DEV_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get latest image tag
        id: get-tag
        run: |
          MAIN_SHA_TAG="main-stable"
          echo "image_tag=${MAIN_SHA_TAG}" >> $GITHUB_OUTPUT
          echo "full_image=${ECR_REGISTRY}/${ECR_REPOSITORY}:${MAIN_SHA_TAG}" >> $GITHUB_OUTPUT

      - name: Get EC2 instance details
        id: get-instance
        run: |
          PRIVATE_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PrivateIpAddress' \
            --output text \
            --region ${{ vars.AWS_DEV_REGION }})
          echo "private_ip=${PRIVATE_IP}" >> $GITHUB_OUTPUT

      - name: Copy template to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.get-instance.outputs.private_ip }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_EC2_KEY }}
          source: "deployment/frontend.service.template"
          target: "/tmp/"

      - name: Deploy and restart service
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE: ${{ steps.get-tag.outputs.full_image }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REGION: ${{ vars.AWS_DEV_ECR_REGION }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
        with:
          host: ${{ steps.get-instance.outputs.private_ip }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_EC2_KEY }}
          envs: IMAGE,ECR_REGISTRY,ECR_REGION,SERVICE_NAME
          script: |
            # Get API key from SSM Parameter Store
            API_KEY=$(aws ssm get-parameter --name "/inference/api-key" --with-decryption --query 'Parameter.Value' --output text --region ${{ vars.AWS_DEV_REGION }})

            # Create service file from template with substitutions
            sed -e "s|{{IMAGE}}|${IMAGE}|g" \
                -e "s|{{ECR_REGISTRY}}|${ECR_REGISTRY}|g" \
                -e "s|{{ECR_REGION}}|${ECR_REGION}|g" \
                -e "s|{{API_KEY}}|${API_KEY}|g" \
                /tmp/frontend.service.template | sudo tee /etc/systemd/system/${SERVICE_NAME}.service > /dev/null

            # Stop existing service if it exists
            if systemctl list-units --full -all | grep -Fq "${SERVICE_NAME}.service"; then
              echo "Service ${SERVICE_NAME} exists, stopping it..."
              sudo systemctl stop ${SERVICE_NAME} || true
              sudo systemctl disable ${SERVICE_NAME} || true
            else
              echo "Service ${SERVICE_NAME} does not exist, skipping stop step"
            fi

            # Clean up existing containers
            echo "Updating ${SERVICE_NAME} service..."
            sudo docker stop ${SERVICE_NAME} || true
            sudo docker rm ${SERVICE_NAME} || true

            # Reload systemd and start service
            sudo systemctl daemon-reload
            echo "Starting ${SERVICE_NAME} service..."
            sudo systemctl enable ${SERVICE_NAME}
            sudo systemctl start ${SERVICE_NAME}
            sleep 5
            sudo systemctl status ${SERVICE_NAME} --no-pager


      - name: Wait for service to be ready
        run: sleep 30

      - name: Health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.get-instance.outputs.private_ip }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_EC2_KEY }}
          script: |
            curl -f http://localhost:8080 || exit 1
            echo 'Health check passed'

      - name: Deployment summary
        run: |
          echo "### ðŸš€ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** development" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ steps.get-tag.outputs.full_image }}" >> $GITHUB_STEP_SUMMARY
          echo "**SHA:** ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check:** âœ… Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service URL:** http://${{ steps.get-instance.outputs.private_ip }}:8080" >> $GITHUB_STEP_SUMMARY